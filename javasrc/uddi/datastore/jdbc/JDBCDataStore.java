/* * jUDDI - An open source Java implementation of UDDI v2.0 * http://juddi.org/ * * Copyright (c) 2002, Steve Viens and contributors * All rights reserved. */package psl.discus.javasrc.uddi.datastore.jdbc;import psl.discus.javasrc.uddi.error.*;import psl.discus.javasrc.uddi.datastore.DataStore;import psl.discus.javasrc.uddi.util.Config;import psl.discus.javasrc.uddi.uuidgen.UUID;import org.apache.log4j.Logger;import org.uddi4j.datatype.*;import org.uddi4j.datatype.assertion.*;import org.uddi4j.datatype.business.*;import org.uddi4j.datatype.binding.*;import org.uddi4j.datatype.service.*;import org.uddi4j.datatype.tmodel.*;import org.uddi4j.response.*;import org.uddi4j.util.*;import java.sql.Connection;import java.sql.SQLException;import java.util.Vector;/** * @author  Steve Viens * @version 0.6 */public class JDBCDataStore implements DataStore{  // private reference to the jUDDI logger  private static Logger log = Logger.getLogger(JDBCDataStore.class);  // private db connection associated with this datastore  private PooledConnection pooledConnection = null;    // private db connection associated with this datastore  private Connection connection = null;  // private XA transaxtion object  private Transaction transaction = null;  /**   *    */  JDBCDataStore(PooledConnection pooledConnection)  {    this.pooledConnection = pooledConnection;    this.connection = pooledConnection.getConnection();  }  /**   *   */  Connection getConnection()  {    return this.connection;  }    /**   *   */  PooledConnection getPooledConnection()  {    return this.pooledConnection;  }   /**  * begin a new transaction  */  public void beginTrans()    throws JUDDIException  {    try    {      this.transaction = new Transaction();      this.transaction.begin(connection);    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }  } /**  * commit on all connections.  */  public void commit()    throws JUDDIException  {    try    {      this.transaction.commit();    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }  } /**  * rollback on all connections.  */  public void rollback()    throws JUDDIException  {    try    {      this.transaction.rollback();    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }  }  /**   *   */  public void saveBusiness(BusinessEntity business)    throws JUDDIException  {    try    {      if ((business != null) && (connection != null))      {        String businessKey = business.getBusinessKey();        // insert the BusinessEntity object        BusinessEntityTable.insert(business,connection);        // insert all of the BusinessEntity Name objects        if (business.getNameVector() != null)          BusinessNameTable.insert(businessKey,business.getNameVector(),connection);        // insert all of the BusinessEntity Description objects        if (business.getDescriptionVector() != null)          BusinessDescTable.insert(businessKey,business.getDescriptionVector(),connection);        // insert the BusinessEntity's IdentiferBag KeyedReferences        IdentifierBag idBag = business.getIdentifierBag();        if ((idBag != null) && (idBag.getKeyedReferenceVector() != null))          BusinessIdentifierTable.insert(businessKey,idBag.getKeyedReferenceVector(),connection);        // insert the BusinessEntity's CategoryBag KeyedReferences        CategoryBag catBag = business.getCategoryBag();        if ((catBag != null) && (catBag.getKeyedReferenceVector() != null))          BusinessCategoryTable.insert(businessKey,catBag.getKeyedReferenceVector(),connection);        // insert the BusinessEntity's DiscoveryURLs        DiscoveryURLs discURLs = business.getDiscoveryURLs();        if ((discURLs != null) && (discURLs.getDiscoveryURLVector() != null))          DiscoveryURLTable.insert(businessKey,discURLs.getDiscoveryURLVector(),connection);        // insert the BusinessEntity's Contact objects & information        Contacts contacts = business.getContacts();        if (contacts != null)        {          Vector contactVector = contacts.getContactVector();          if ((contactVector != null) && (contactVector.size() > 0))          {            // insert the BusinessEntity's Contact objects            ContactTable.insert(businessKey,contacts.getContactVector(),connection);            // insert the BusinessEntity's Contact Phone, Address and Email Info            int contactID = 0;            int listSize = contactVector.size();            for (int i=0; i<listSize; i++)            {              Contact contact = (Contact)contactVector.elementAt(i);              ContactDescTable.insert(businessKey,contactID,contact.getDescriptionVector(),connection);              EmailTable.insert(businessKey,contactID,contact.getEmailVector(),connection);              PhoneTable.insert(businessKey,contactID,contact.getPhoneVector(),connection);              AddressTable.insert(businessKey,contactID,contact.getAddressVector(),connection);              // insert the Contact's AddressLine objects              Vector addrList = contact.getAddressVector();              int addrID = 0;              int addrListSize = addrList.size();              for (int j=0; j<addrListSize; j++)              {                Address address = (Address)addrList.elementAt(j);                AddressLineTable.insert(businessKey,contactID,addrID,address.getAddressLineVector(),connection);                addrID++;              }              contactID++;            }          }        }        // 'save' the BusinessEntity's BusinessService objects        BusinessServices services = business.getBusinessServices();        if ((services != null) && (services.getBusinessServiceVector() != null))        {          Vector serviceVector = services.getBusinessServiceVector();          int serviceListSize = serviceVector.size();          for (int j=0; j<serviceListSize; j++)          {            BusinessService service = (BusinessService)serviceVector.elementAt(j);            service.setBusinessKey(businessKey);            service.setServiceKey(UUID.nextID());            saveService(service);          }        }      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }      }  /**   *   */  public BusinessEntity fetchBusiness(String businessKey)    throws JUDDIException  {    BusinessEntity business = null;    try    {      if ((businessKey != null) && (connection != null))      {        business = BusinessEntityTable.select(businessKey,connection);        business.setNameVector(BusinessNameTable.select(businessKey,connection));        business.setDescriptionVector(BusinessDescTable.select(businessKey,connection));        IdentifierBag identifierBag = new IdentifierBag();        identifierBag.setKeyedReferenceVector(BusinessIdentifierTable.select(businessKey,connection));        business.setIdentifierBag(identifierBag);        CategoryBag categoryBag = new CategoryBag();        categoryBag.setKeyedReferenceVector(BusinessCategoryTable.select(businessKey,connection));        business.setCategoryBag(categoryBag);        DiscoveryURLs discoveryURLs = new DiscoveryURLs();        discoveryURLs.setDiscoveryURLVector(DiscoveryURLTable.select(businessKey,connection));        business.setDiscoveryURLs(discoveryURLs);        // 'select' the BusinessEntity's Contact objects        Vector contactList = ContactTable.select(businessKey,connection);        for (int contactID=0; contactID<contactList.size(); contactID++)        {          Contact contact = (Contact)contactList.elementAt(contactID);          contact.setPhoneVector(PhoneTable.select(businessKey,contactID,connection));          contact.setEmailVector(EmailTable.select(businessKey,contactID,connection));          Vector addressList = AddressTable.select(businessKey,contactID,connection);          for (int addressID=0; addressID<addressList.size(); addressID++)          {            Address address = (Address)addressList.elementAt(addressID);            address.setAddressLineVector(AddressLineTable.select(businessKey,contactID,addressID,connection));          }          contact.setAddressVector(addressList);        }        Contacts contacts = new Contacts();        contacts.setContactVector(contactList);        business.setContacts(contacts);        // 'fetch' the BusinessEntity's BusinessService objects        Vector serviceVector = fetchServiceByBusinessKey(businessKey);        BusinessServices services = new BusinessServices();        services.setBusinessServiceVector(serviceVector);        business.setBusinessServices(services);      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }        return business;  }  /**   *   */  public void deleteBusiness(String businessKey)    throws JUDDIException  {    try    {      if ((businessKey != null) && (connection != null))      {        // delete the BusinessEntity's Services (and dependents)        deleteServiceByBusinessKey(businessKey);        // delete the dependents of BusinessEntity        AddressLineTable.delete(businessKey,connection);        AddressTable.delete(businessKey,connection);        EmailTable.delete(businessKey,connection);        PhoneTable.delete(businessKey,connection);        ContactTable.delete(businessKey,connection);        DiscoveryURLTable.delete(businessKey,connection);        BusinessIdentifierTable.delete(businessKey,connection);        BusinessCategoryTable.delete(businessKey,connection);        BusinessDescTable.delete(businessKey,connection);        BusinessNameTable.delete(businessKey,connection);        // delete any PublisherAssertion related to this BusinessEntity        PublisherAssertionTable.deleteByFromKey(businessKey,connection);        PublisherAssertionTable.deleteByToKey(businessKey,connection);        // finally, delete the BusinessEntity itself.        BusinessEntityTable.delete(businessKey,connection);      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }      }  /**   *   */  public boolean isBusinessOwner(String businessKey,String authorizedName)    throws JUDDIException  {    try    {      if ((authorizedName != null) && (businessKey != null) && (connection != null))        return BusinessEntityTable.verifyOwnership(businessKey,authorizedName,connection);    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }        // default to false    return false;  }  /**   *   */  public boolean isValidBusinessKey(String businessKey)    throws JUDDIException  {    try    {      if ((businessKey != null) && (connection != null) &&           (BusinessEntityTable.select(businessKey,connection) != null))        return true;    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }        // default to false    return false;  }  /**   *   */  public void saveService(BusinessService service)    throws JUDDIException  {    try    {      if ((service != null) && (connection != null))      {        String serviceKey = service.getServiceKey();        // insert the BusinessService object        BusinessServiceTable.insert(service,connection);        // insert all of the BusinessService's Name objects        if (service.getNameVector() != null)          ServiceNameTable.insert(serviceKey,service.getNameVector(),connection);        // insert all of the BusinessService's Description objects        if (service.getDescriptionVector() != null)          ServiceDescTable.insert(serviceKey,service.getDescriptionVector(),connection);        // insert the BusinessService's CategoryBag KeyedReferences        CategoryBag catBag = service.getCategoryBag();        if ((catBag != null) && (catBag.getKeyedReferenceVector() != null))          ServiceCategoryTable.insert(serviceKey,catBag.getKeyedReferenceVector(),connection);        // extract the binding template objects        BindingTemplates bindings = service.getBindingTemplates();        if (bindings == null)          return; // no binding templates were present        // convert the binding templates to a vector of templates        Vector bindingList = bindings.getBindingTemplateVector();        if (bindingList == null)          return; // a binding template vector wasn't found        // save all of the binding templates that were found        int listSize = bindingList.size();        for (int i=0; i<listSize; i++)        {          BindingTemplate binding = (BindingTemplate)bindingList.elementAt(i);          binding.setServiceKey(serviceKey);          binding.setBindingKey(UUID.nextID());          saveBinding(binding);        }      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }  }  /**   *   */  public BusinessService fetchService(String serviceKey)    throws JUDDIException  {    BusinessService service = null;    try    {      if ((serviceKey != null) && (connection != null))      {        service = BusinessServiceTable.select(serviceKey,connection);        service.setNameVector(ServiceNameTable.select(serviceKey,connection));        service.setDescriptionVector(ServiceDescTable.select(serviceKey,connection));        CategoryBag bag = new CategoryBag();        bag.setKeyedReferenceVector(ServiceCategoryTable.select(serviceKey,connection));        service.setCategoryBag(bag);        // 'fetch' the BusinessService's BindingTemplate objects        Vector bindingVector = fetchBindingByServiceKey(serviceKey);        BindingTemplates bindings = new BindingTemplates();        bindings.setBindingTemplateVector(bindingVector);        service.setBindingTemplates(bindings);      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }    return service;  }  /**   *   */  public void deleteService(String serviceKey)    throws JUDDIException  {    try    {      if ((serviceKey != null) && (connection != null))      {        // delete the BusinessService's BindingTemplates (and dependents)        deleteBindingByServiceKey(serviceKey);        // delete the immediate dependents of BusinessService        ServiceNameTable.delete(serviceKey,connection);        ServiceDescTable.delete(serviceKey,connection);        ServiceCategoryTable.delete(serviceKey,connection);        // finally, delete the BusinessService itself.        BusinessServiceTable.delete(serviceKey,connection);      }          }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }  }  /**   *   */  public Vector fetchServiceByBusinessKey(String businessKey)    throws JUDDIException  {    Vector serviceList = new Vector();    try    {      if ((businessKey != null) && (connection != null))      {        Vector tempList = BusinessServiceTable.selectByBusinessKey(businessKey,connection);        for (int i=0; i<tempList.size(); i++)        {          BusinessService service = (BusinessService)tempList.elementAt(i);          serviceList.add(fetchService(service.getServiceKey()));        }      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }    return serviceList;  }  /**   *   */  public void deleteServiceByBusinessKey(String businessKey)    throws JUDDIException  {    try    {      if ((businessKey != null) && (connection != null))      {        // obtain a vector of BusinessServices associated with the BusinessKey        Vector services = BusinessServiceTable.selectByBusinessKey(businessKey,connection);        // loop through the vector deleting each service in turn        int listSize = services.size();        for (int i=0; i<listSize; i++)        {          BusinessService service = (BusinessService)services.elementAt(i);          deleteService(service.getServiceKey());        }      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }  }  /**   *   */  public boolean isValidServiceKey(String serviceKey)    throws JUDDIException  {    try    {      if ((serviceKey != null) && (connection != null) &&           (BusinessServiceTable.select(serviceKey,connection) != null))        return true;    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }    // default to false    return false;  }  /**   *   */  public boolean isServiceOwner(String serviceKey,String authorizedName)    throws JUDDIException  {    try    {      if ((authorizedName != null) && (serviceKey != null) && (connection != null))        return BusinessServiceTable.verifyOwnership(serviceKey,authorizedName,connection);    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }    // default to false    return false;  }  /**   *   */  public void saveBinding(BindingTemplate binding)    throws JUDDIException  {    try    {      if ((binding != null) && (connection != null))      {        String bindingKey = binding.getBindingKey();        // insert the BindingTemplate object        BindingTemplateTable.insert(binding,connection);        // insert all of the BindingTemplate's Description objects        if (binding.getDescriptionVector() != null)          BindingDescTable.insert(bindingKey,binding.getDescriptionVector(),connection);        TModelInstanceDetails details = binding.getTModelInstanceDetails();        if (details == null)          return;        Vector detailsVector = details.getTModelInstanceInfoVector();        if (detailsVector == null)          return;        TModelInstanceInfoTable.insert(bindingKey,detailsVector,connection);        // save all of the BindingTemplate objects        Vector infoList = details.getTModelInstanceInfoVector();        int infoID = 0;        int listSize = infoList.size();        for (int i=0; i<listSize; i++)        {          TModelInstanceInfo info = (TModelInstanceInfo)infoList.elementAt(i);          TModelInstanceInfoDescTable.insert(binding.getBindingKey(),infoID,info.getDescriptionVector(),connection);          InstanceDetails instDetails = info.getInstanceDetails();          if (instDetails != null)          {            InstanceDetailsTable.insert(binding.getBindingKey(),infoID,info.getInstanceDetails(),connection);            int instDetailsID = 0;            InstanceDetailsDescTable.insert(binding.getBindingKey(),infoID,instDetailsID,instDetails.getDescriptionVector(),connection);            InstanceDetailsDocTable.insert(binding.getBindingKey(),infoID,instDetailsID,instDetails.getOverviewDoc(),connection);            OverviewDoc overDoc = instDetails.getOverviewDoc();            int overDocID = 0;            InstanceDetailsDocDescTable.insert(binding.getBindingKey(),infoID,instDetailsID,overDocID,overDoc.getDescriptionVector(),connection);          }          infoID++;        }      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }  }  /**   *   */  public BindingTemplate fetchBinding(String bindingKey)    throws JUDDIException  {    BindingTemplate binding = null;    try    {      if ((bindingKey != null) && (connection != null))      {        binding = BindingTemplateTable.select(bindingKey,connection);      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }    return binding;  }  /**   *   */  public void deleteBinding(String bindingKey)    throws JUDDIException  {    try    {      if ((bindingKey != null) && (connection != null))      {        // delete the immediate dependents of BindingTemplate        BindingDescTable.delete(bindingKey,connection);        TModelInstanceInfoDescTable.delete(bindingKey,connection);        TModelInstanceInfoTable.delete(bindingKey,connection);        InstanceDetailsDocDescTable.delete(bindingKey,connection);        InstanceDetailsDocTable.delete(bindingKey,connection);        InstanceDetailsDescTable.delete(bindingKey,connection);        InstanceDetailsTable.delete(bindingKey,connection);        // finally, delete the BindingTemplate itself.        BindingTemplateTable.delete(bindingKey,connection);      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }  }  /**   *   */  public Vector fetchBindingByServiceKey(String serviceKey)    throws JUDDIException  {    Vector bindingList = new Vector();    try    {      if ((serviceKey != null) && (connection != null))      {        Vector tempList = BindingTemplateTable.selectByServiceKey(serviceKey,connection);        for (int i=0; i<tempList.size(); i++)        {          BindingTemplate binding = (BindingTemplate)tempList.elementAt(i);          bindingList.add(fetchBinding(binding.getBindingKey()));        }      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }    return bindingList;  }  /**   *   */  public void deleteBindingByServiceKey(String serviceKey)    throws JUDDIException  {    try    {      if ((serviceKey != null) && (connection != null))      {        // obtain a vector of BusinessServices associated with the BusinessKey        Vector bindings = BindingTemplateTable.selectByServiceKey(serviceKey,connection);        // loop through the vector deleting each service in turn        int listSize = bindings.size();        for (int i=0; i<listSize; i++)        {          BindingTemplate binding = (BindingTemplate)bindings.elementAt(i);          deleteBinding(binding.getBindingKey());        }      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }  }  /**   *   */  public boolean isValidBindingKey(String bindingKey)    throws JUDDIException  {    try    {      if ((bindingKey != null) && (connection != null) &&           (BindingTemplateTable.select(bindingKey,connection) != null))        return true;    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }    // default to false    return false;  }  /**   *   */  public boolean isBindingOwner(String bindingKey,String authorizedName)    throws JUDDIException  {    try    {      if ((authorizedName != null) && (bindingKey != null) && (connection != null))        return BindingTemplateTable.verifyOwnership(bindingKey,authorizedName,connection);    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }    // default to false    return false;  }  /**   *   */  public void saveTModel(TModel tModel)    throws JUDDIException  {    try    {      if ((tModel != null) && (connection != null))      {        String tModelKey = tModel.getTModelKey();        // insert the TModel object        TModelTable.insert(tModel,connection);        // insert all of the TModel Description objects        if (tModel.getDescriptionVector() != null)          TModelDescTable.insert(tModelKey,tModel.getDescriptionVector(),connection);        // insert the TModel's IdentiferBag KeyedReferences        IdentifierBag idBag = tModel.getIdentifierBag();        if ((idBag != null) && (idBag.getKeyedReferenceVector() != null))          TModelIdentifierTable.insert(tModelKey,idBag.getKeyedReferenceVector(),connection);        // insert the TModel's CategoryBag KeyedReferences        CategoryBag catBag = tModel.getCategoryBag();        if ((catBag != null) && (catBag.getKeyedReferenceVector() != null))          TModelCategoryTable.insert(tModelKey,catBag.getKeyedReferenceVector(),connection);      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }      }  /**   *   */  public TModel fetchTModel(String tModelKey)    throws JUDDIException  {    TModel tModel = null;    try    {      if ((tModelKey != null) && (connection != null))      {        tModel = TModelTable.select(tModelKey,connection);      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }    return tModel;  }  /**   *   */  public void deleteTModel(String tModelKey)    throws JUDDIException  {    try    {      if ((tModelKey != null) && (connection != null))      {        TModelTable.delete(tModelKey,connection);      }    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }  }  /**   *   */  public boolean isValidTModelKey(String tModelKey)    throws JUDDIException  {    try    {      if ((tModelKey != null) && (connection != null) &&           (TModelTable.select(tModelKey,connection) != null))        return true;    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }     // default to false    return false;  }  /**   *   */  public boolean isTModelOwner(String tModelKey,String authorizedName)    throws JUDDIException  {    try    {      if ((authorizedName != null) && (tModelKey != null) && (connection != null))        return TModelTable.verifyOwnership(tModelKey,authorizedName,connection);    }    catch(java.sql.SQLException sqlex)    {      throw new JUDDIException(sqlex);    }     // default to false    return false;  }    /***************************************************************************/  /***************************** TEST DRIVER *********************************/  /***************************************************************************/  /*  public static void main(String[] args)  {    psl.discus.javasrc.uddi.util.SysManager.startup();    BusinessEntity business = null;    try // let's create a complete BusinessEntity object    {      Vector contactVector = new Vector(1);      Contact contact = new Contact();      contact.setUseType("sales");      contact.setPersonName("Steve Viens");      contactVector.add(contact);      Contacts contacts = new Contacts();      contacts.setContactVector(contactVector);      Phone phone = new Phone("603.457.8113");      phone.setUseType("Pager");      Vector phoneVector = new Vector(1);      phoneVector.add(phone);      contact.setPhoneVector(phoneVector);      Email email = new Email("support@steveviens.com");      email.setUseType("Support");      Vector emailVector = new Vector(1);      emailVector.add(email);      contact.setEmailVector(emailVector);      Vector addrVector = new Vector(2);      Address address = new Address();      address.setUseType("Street");      address.setSortCode("a");      Vector lineVector = new Vector(3);      lineVector.add(new AddressLine("SteveViens.com, Inc."));      lineVector.add(new AddressLine("78 Marne Avenue"));      lineVector.add(new AddressLine("Portsmouth, NH 03801-5557"));      address.setAddressLineVector(lineVector);      addrVector.add(address);      address = new Address();      address.setUseType("Box");      address.setSortCode("b");      lineVector = new Vector(3);      lineVector.add(new AddressLine("SteveViens.com, Inc."));      lineVector.add(new AddressLine("78 Marne Avenue"));      lineVector.add(new AddressLine("Portsmouth, NH 03801-5557"));      address.setAddressLineVector(lineVector);      addrVector.add(address);      contact.setAddressVector(addrVector);      Vector descVector = new Vector(1);      Description desc = new Description("A UDDI-based Web Service Registry and DataStore","en");      desc.setLang(org.juddi.util.Language.ENGLISH);      descVector.add(desc);      DiscoveryURLs discoveryURLs = new DiscoveryURLs();      Vector urlVector = new Vector(1);      urlVector.add(new DiscoveryURL("businessEntity","http://www.steveviens.com/yahoo.html"));      discoveryURLs.setDiscoveryURLVector(urlVector);      CategoryBag categoryBag = new CategoryBag();      Vector catVector = new Vector(2);      catVector.add(new KeyedReference("NAME","STEVE"));      catVector.add(new KeyedReference("AGE","35"));      categoryBag.setKeyedReferenceVector(catVector);      IdentifierBag identifierBag = new IdentifierBag();      Vector idVector = new Vector(2);      idVector.add(new KeyedReference("PET","DOG"));      idVector.add(new KeyedReference("BREED","GOLDEN RETRIEVER"));      identifierBag.setKeyedReferenceVector(idVector);      Vector nameVector = new Vector(3);      Name name = new Name("EnglishWebServices.com");      name.setLang(org.juddi.util.Language.ENGLISH);      nameVector.add(name);      name = new Name("ItalianWebServices.com");      name.setLang(org.juddi.util.Language.ITALIAN);      nameVector.add(name);      name = new Name("WelshWebServices.com");      name.setLang(org.juddi.util.Language.WELSH);      nameVector.add(name);      business = new BusinessEntity();      business.setBusinessKey(org.juddi.util.UUID.nextID());      business.setAuthorizedName("sviens");      business.setOperator("WebServiceRegistry");      business.setNameVector(nameVector);      business.setDiscoveryURLs(discoveryURLs);      business.setDescriptionVector(descVector);      business.setCategoryBag(categoryBag);      business.setIdentifierBag(identifierBag);      business.setContacts(contacts);      descVector = new Vector(2);      desc = new Description("An InstanceDetails OverviewDoc in English");      desc.setLang(org.juddi.util.Language.ENGLISH);      descVector.add(desc);      desc = new Description("An InstanceDetails OverviewDoc in Italian");      desc.setLang(org.juddi.util.Language.ITALIAN);      descVector.add(desc);      OverviewDoc overDoc = new OverviewDoc();      overDoc.setDescriptionVector(descVector);      overDoc.setOverviewURL("http://www.steveviens.com/juddi/overview.html");      descVector = new Vector(1);      desc = new Description("An InstanceDetails in English");      desc.setLang(org.juddi.util.Language.ENGLISH);      descVector.add(desc);      InstanceDetails instDet = new InstanceDetails();      instDet.setDescriptionVector(descVector);      instDet.setOverviewDoc(overDoc);      instDet.setInstanceParms(new InstanceParms("InstanceDetails Parms"));      descVector = new Vector(1);      desc = new Description("A TModelInstanceInfo in English");      desc.setLang(org.juddi.util.Language.ENGLISH);      descVector.add(desc);      Vector tModInstInfoVector = new Vector(1);      TModelInstanceInfo tModInstInfo = new TModelInstanceInfo();      tModInstInfo.setDescriptionVector(descVector);      tModInstInfo.setInstanceDetails(instDet);      tModInstInfo.setTModelKey(UUID.nextID());      tModInstInfoVector.add(tModInstInfo);      TModelInstanceDetails tModInstDet = new TModelInstanceDetails();      tModInstDet.setTModelInstanceInfoVector(tModInstInfoVector);      nameVector = new Vector(3);      name = new Name("Magic8Ball");      name.setLang(org.juddi.util.Language.ENGLISH);      nameVector.add(name);      name = new Name("Magicenetto");      name.setLang(org.juddi.util.Language.ITALIAN);      nameVector.add(name);      name = new Name("Magik8Bol.com");      name.setLang(org.juddi.util.Language.WELSH);      nameVector.add(name);      descVector = new Vector(1);      desc = new Description("Need an Answer Quick - Ask Mr 8");      desc.setLang(org.juddi.util.Language.ENGLISH);      descVector.add(desc);      desc = new Description("Aska de Mr. Eight-Balla");      desc.setLang(org.juddi.util.Language.ITALIAN);      descVector.add(desc);      categoryBag = new CategoryBag();      catVector = new Vector(2);      catVector.add(new KeyedReference("Magic8Ball","Module"));      categoryBag.setKeyedReferenceVector(catVector);      BusinessService service = new BusinessService();      service.setBusinessKey(business.getBusinessKey());      service.setServiceKey(org.juddi.util.UUID.nextID());      service.setNameVector(nameVector);      service.setDescriptionVector(descVector);      service.setCategoryBag(categoryBag);      descVector = new Vector(1);      desc = new Description("A BindingTemplate Description in English");      desc.setLang(org.juddi.util.Language.ENGLISH);      descVector.add(desc);      BindingTemplate binding = new BindingTemplate();      binding.setServiceKey(service.getServiceKey());      binding.setBindingKey(org.juddi.util.UUID.nextID());      binding.setAccessPoint(null);      binding.setHostingRedirector(new HostingRedirector(UUID.nextID()));      binding.setDescriptionVector(descVector);      binding.setTModelInstanceDetails(tModInstDet);      Vector bindingVector = new Vector(1);      bindingVector.add(binding);      BindingTemplates bindings = new BindingTemplates();      bindings.setBindingTemplateVector(bindingVector);      service.setBindingTemplates(bindings);      Vector serviceVector = new Vector(1);      serviceVector.add(service);      BusinessServices services = new BusinessServices();      services.setBusinessServiceVector(serviceVector);      business.setBusinessServices(services);    }    catch(Exception ex)    {      ex.printStackTrace();    }    try    {      String authorizedName = "sviens";      Vector businessVector = new Vector();      businessVector.add(business);      JDBCDataStore datastore = new JDBCDataStore();      datastore.save_business(authorizedName,businessVector);      Vector businessKeyVector = new Vector();      businessKeyVector.add(business.getBusinessKey());      datastore.delete_business(authorizedName,businessKeyVector);    }    catch(Exception ex)    {      ex.printStackTrace();    }    finally    {      pool.destroy();    }    psl.discus.javasrc.uddi.util.SysManager.shutdown();  }  */}