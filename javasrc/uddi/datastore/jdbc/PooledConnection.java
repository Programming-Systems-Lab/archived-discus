/* * jUDDI - An open source Java implementation of UDDI v2.0 * http://juddi.org/ * * Copyright (c) 2002, Steve Viens and contributors * All rights reserved. */package psl.discus.javasrc.uddi.datastore.jdbc;import psl.discus.javasrc.uddi.error.*;import psl.discus.javasrc.uddi.util.*;import org.apache.log4j.Logger;import java.sql.*;/** * @author  Steve Viens * @version 0.6 */public class PooledConnection{  // private reference to the jUDDI logger  private static Logger log = Logger.getLogger(PooledConnection.class);  private Connection connection = null;  private long timeLastVerified = 0;  /**   * Don't want this constructor to be public. No one should be calling   * it except the static ConnectionPool.connectToDefaultDatabase()   * method.<p>   *   * @param an open JDBC connection   */  PooledConnection(Connection connection)  {    this.setConnection(connection);    this.setTimeLastVerified(System.currentTimeMillis());  }  /**   * Assigns a JDBC Connection object to this database manager   *   * @param conn - a valid and open JDBC Database Connection object   */  public void setConnection(Connection conn)  {    this.connection = conn;  }  /**   * Simple accessor method to return the JDBC Connection object to the   * caller.<p>   *   * @return An open JDBC Connection   */  public Connection getConnection()  {    return this.connection;  }  /**   * sets the time that this DBManager was last verified to be open and in   * working order   *   * @param time - an integer representing a valid time - typically obtained   *  by a call to System.currentTimeMillis()   */  public void setTimeLastVerified(long time)  {    this.timeLastVerified = time;  }  /**   * getTimeLastVerified   *   * @return the last time this connection was verified as a long integer.   */  public long getTimeLastVerified()  {    return this.timeLastVerified;  }  /**   * Determine if the connection to the database is still in working order.<p>   *   * @return true is closed or false if open and/or valid   */  protected boolean isClosed()  {    // verify that our connection is ok    boolean connectionClosed = false;    // if it's already null don't try to close it    if (this.connection == null)      return true;    try    {      connection.commit();    }    catch (java.sql.SQLException e)    {      log.debug("SQLException thrown on commit, connection must be bad");      connectionClosed = true;    }    return connectionClosed;  }}