/* * jUDDI - An open source Java implementation of UDDI v2.0 * http://juddi.org/ * * Copyright (c) 2002, Steve Viens and contributors * All rights reserved. */package psl.discus.javasrc.uddi.datastore.jdbc;import psl.discus.javasrc.uddi.error.*;import psl.discus.javasrc.uddi.datastore.*;import psl.discus.javasrc.uddi.util.Config;import org.apache.log4j.Logger;import java.sql.Connection;import java.sql.SQLException;  /** * Implementation of Factory pattern to decide which class that * implements the DataStore interface will get instantiated. * * The name of the class to instantiate should exist as a property * in the juddi.properties configuration file with a property name * of juddi.datastore.datastoreClassName. If the property is not  * found an Exception is thrown. * * @author  Steve Viens * @version 0.6 */public class JDBCDataStoreFactory extends DataStoreFactory{  // private reference to the jUDDI logger  private static Logger log = Logger.getLogger(JDBCDataStoreFactory.class);  // private reference to the jUDDI connection pool singleton  private static ConnectionPool pool = ConnectionPool.getInstance();  private static String datastoreClassName = null;  private static Class datastoreClass = null;  /**   * Returns a new instance of the DataStore subclass as specified by the   * juddi.datastore.datastoreClassName property in the juddi.properties   * configuration file.   * @return DataStoreFactory   */  public static DataStoreFactory getInstance()  {    DataStoreFactory datastore = null;    if(datastoreClass==null)      datastoreClass = loadClass();    try    {      log.info("Attempting to instantiate DataStoreFactory: "+datastoreClassName);      // try to instantiate the DataStoreFactory subclass      datastore = (DataStoreFactory)datastoreClass.newInstance();    }    catch(java.lang.Exception e)    {      log.error("Exception while attempting to instantiate an implementation " +        "of DataStoreFactory: " + datastoreClassName + "\n" + e.getMessage(),e);   }    return datastore;  }  /**   *   */  public DataStore aquireDataStore()    throws JUDDIException  {    // aquire a connection from the connection pool.    PooledConnection conn = pool.acquirePooledConnection();    // create a JDBCDataStore with the connection.    return new JDBCDataStore(conn);  }  /**   *   */  public void releaseDataStore(DataStore datastore)    throws JUDDIException  {    // get the connection from of the datastore.    PooledConnection conn = ((JDBCDataStore)datastore).getPooledConnection();    // release the connection back into the pool.    pool.releasePooledConnection(conn);  }  /**   * Loads and returns a Class object that is an implementation of the IDataStore   * interface as specified by the juddi.datastore.datastoreClassName property   * that's found in the juddi.properties configuration file.   *   * NOTE: This method DOES NOT return an instance of an IDataStore,   * it returns an instance of the java.lang.Class object which happens to be   * an implementation of the IDataStore interface (got that?).   */  private static synchronized Class loadClass()  {    // check to make sure another thread didn't beat us to this code and    // already load and instantiate an IDataStore.    if (datastoreClass==null)    {      try      {        // try to obtain the name of the IDataStore implementaion to create        datastoreClassName =          Config.getProperty("juddi.datastore.datastoreClassName");        // if we didn't find an IDataStore class name in the config file then        // throw an exception here.  Configuration is probably incorrect.        if(datastoreClassName==null)          throw new RuntimeException("No dataSourceClassName has been " +            "specified \n Couldn't find an implementation of IDataStore" +            "Take a look at the juddi.datastore.datastoreClassName " +            "property in the juddi.properties file to make sure you have a " +            "valid entry");      }      catch(java.lang.Exception e)      {        throw new RuntimeException("org.juddi.util.Config is not " +          "initialized; cannot continue with initialization");      }      try      {         // instruct the class loader to load the IDataStore implementation        datastoreClass = java.lang.Class.forName(datastoreClassName);      }      catch(ClassNotFoundException e)      {        log.error("Implementation of IDataStore interface not found in " +          "classpath: " + datastoreClassName + " not found.",e);      }    }        return datastoreClass;  }}