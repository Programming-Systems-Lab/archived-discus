/* * jUDDI - An open source Java implementation of UDDI v2.0 * http://juddi.org/ * * Copyright (c) 2002, Steve Viens and contributors * All rights reserved. */package psl.discus.javasrc.uddi.datastore.jdbc;import psl.discus.javasrc.uddi.error.*;import psl.discus.javasrc.uddi.uuidgen.UUID;import org.uddi4j.*;import org.uddi4j.datatype.business.BusinessEntity;import org.uddi4j.util.*;import org.apache.log4j.Logger;import java.sql.Connection;import java.sql.ResultSet;import java.sql.PreparedStatement;import java.sql.Statement;import java.sql.Timestamp;import java.util.Vector;/** * @author  Steve Viens * @version 0.6 */public class BusinessEntityTable{  // private reference to the jUDDI logger  private static Logger log = Logger.getLogger(BusinessEntityTable.class);  static String dropSQL = null;  static String createSQL = null;  static String insertSQL = null;  static String deleteSQL = null;  static String selectSQL = null;  static String selectByAuthorizedNameSQL = null;  static String verifyOwnershipSQL = null;    static  {    // buffer used to build SQL statements    StringBuffer sql = null;    // build dropSQL    dropSQL = "DROP TABLE BUSINESS_ENTITY";    // build createSQL    sql = new StringBuffer(150);    sql.append("CREATE TABLE BUSINESS_ENTITY (");    sql.append("BUSINESS_KEY VARCHAR(41) NOT NULL,");    sql.append("AUTHORIZED_NAME VARCHAR(255) NOT NULL,");    sql.append("OPERATOR VARCHAR(255) NOT NULL,");    sql.append("LAST_UPDATE TIMESTAMP NOT NULL,");    sql.append("PRIMARY KEY (BUSINESS_KEY))");    createSQL = sql.toString();    // build insertSQL    sql = new StringBuffer(150);    sql.append("INSERT INTO BUSINESS_ENTITY (");    sql.append("BUSINESS_KEY,");    sql.append("AUTHORIZED_NAME,");    sql.append("OPERATOR,");    sql.append("LAST_UPDATE) ");    sql.append("VALUES (?,?,?,?)");    insertSQL = sql.toString();    // build deleteSQL    sql = new StringBuffer(100);    sql.append("DELETE FROM BUSINESS_ENTITY ");    sql.append("WHERE BUSINESS_KEY=?");    deleteSQL = sql.toString();    // build selectSQL    sql = new StringBuffer(200);    sql.append("SELECT ");    sql.append("AUTHORIZED_NAME,");    sql.append("OPERATOR ");    sql.append("FROM BUSINESS_ENTITY ");    sql.append("WHERE BUSINESS_KEY=?");    selectSQL = sql.toString();    // build selectByAuthorizedNameSQL    sql = new StringBuffer(200);    sql.append("SELECT ");    sql.append("BUSINESS_KEY,");    sql.append("OPERATOR ");    sql.append("FROM BUSINESS_ENTITY ");    sql.append("WHERE AUTHORIZED_NAME=?");    selectByAuthorizedNameSQL = sql.toString();    // build verifyOwnershipSQL    sql = new StringBuffer(200);    sql.append("SELECT ");    sql.append("* ");    sql.append("FROM BUSINESS_ENTITY ");    sql.append("WHERE BUSINESS_KEY=? ");    sql.append("AND AUTHORIZED_NAME=?");    verifyOwnershipSQL = sql.toString();  }  /**   * Drop the BUSINESS_ENTITY table.   *   * @throws java.sql.SQLException   */  public static void drop(Connection connection)    throws java.sql.SQLException  {    System.out.print("DROP TABLE BUSINESS_ENTITY: ");    Statement statement = null;    try    {      statement = connection.createStatement();      int returnCode = statement.executeUpdate(dropSQL);      System.out.println("Successful (return code=" + returnCode + ")");    }    catch (java.sql.SQLException sqlex)    {      System.out.println("Failed (error message="+sqlex.getMessage() + ")\n");      System.out.println("SQL="+dropSQL);    }    finally    {      try {        statement.close();      }      catch (Exception e) { } // nothing we can do about this!    }  }  /**   * Create the BUSINESS_ENTITY table.   *   * @throws java.sql.SQLException   */  public static void create(Connection connection)    throws java.sql.SQLException  {    System.out.print("CREATE TABLE BUSINESS_ENTITY: ");    Statement statement = null;    try    {      statement = connection.createStatement();      int returnCode = statement.executeUpdate(createSQL);      System.out.println("Successful (return code=" + returnCode + ")");    }    catch (java.sql.SQLException sqlex)    {      System.out.println("Failed (error message="+sqlex.getMessage() + ")\n");      System.out.println("SQL="+createSQL);    }    finally    {      try {        statement.close();      }      catch (Exception e)      {        log.warn("An Exception was encountered while attempting to close " +          "the 'Create BusinessEntity Table' Statement: "+e.getMessage(),e);      }    }  }  /**   * Insert new row into the BUSINESS_ENTITY table.   *   * @param  business object holding values to be inserted   * @param  JDBC connection   * @throws psl.discus.javasrc.uddi.error.JUDDIException, java.sql.SQLException   */  public static void insert(BusinessEntity business,Connection connection)    throws psl.discus.javasrc.uddi.error.JUDDIException, java.sql.SQLException  {    if (business == null)      throw new JUDDIException("attempt to insert a null BusinessEntity");    if (business.getBusinessKey() == null)      throw new JUDDIException("attempt to insert a BusinessEntity with a null BusinessKey");    if (business.getAuthorizedName() == null)      throw new JUDDIException("attempt to insert a BusinessEntity with a null AuthorizedName");    if (business.getOperator() == null)      throw new JUDDIException("attempt to insert a BusinessEntity with a null Operator");    PreparedStatement statement = null;    Timestamp timeStamp = new Timestamp(System.currentTimeMillis());    try    {      statement = connection.prepareStatement(insertSQL);      statement.setString(1,business.getBusinessKey());      statement.setString(2,business.getAuthorizedName());      statement.setString(3,business.getOperator());      statement.setTimestamp(4,timeStamp);      log.info("insert into BUSINESS_ENTITY table:\n\n\t" + insertSQL +        "\n\t BUSINESS_KEY=" + business.getBusinessKey() +        "\n\t AUTHORIZED_NAME=" + business.getAuthorizedName() +        "\n\t OPERATOR=" + business.getOperator() +        "\n\t LAST_UPDATE=" + timeStamp.getTime() + "\n");      int returnCode = statement.executeUpdate();      log.info("insert into BUSINESS_ENTITY was successful, return code=" + returnCode);    }    finally    {      try {        statement.close();      }      catch (Exception e)      {        log.warn("An Exception was encountered while attempting to close " +          "the Insert BusinessEntity PreparedStatement: "+e.getMessage(),e);      }    }  }  /**   * Delete row from the BUSINESS_ENTITY table.   *   * @param  primary key value   * @param  JDBC connection   * @throws psl.discus.javasrc.uddi.error.JUDDIException, java.sql.SQLException   */  public static void delete(String businessKey,Connection connection)    throws psl.discus.javasrc.uddi.error.JUDDIException, java.sql.SQLException  {    if (businessKey == null)      throw new JUDDIException("attempt to delete a BusinessEntity with a null BusinessKey");    PreparedStatement statement = null;    try    {      // prepare the delete      statement = connection.prepareStatement(deleteSQL);      statement.setString(1,businessKey.toString());      log.info("delete from BUSINESS_ENTITY table:\n\n\t" + deleteSQL +        "\n\t BUSINESS_KEY=" + businessKey.toString() + "\n");      // execute the delete      int returnCode = statement.executeUpdate();      log.info("delete from BUSINESS_ENTITY was successful, rows deleted=" + returnCode);    }    finally    {      try {        statement.close();      }      catch (Exception e)      {        log.warn("An Exception was encountered while attempting to close " +          "the Delete BusinessEntity PreparedStatement: "+e.getMessage(),e);      }    }  }  /**   * Select one row from the BUSINESS_ENTITY table.   *   * @param  primary key value   * @param  JDBC connection   * @throws psl.discus.javasrc.uddi.error.JUDDIException, java.sql.SQLException   */  public static BusinessEntity select(String businessKey,Connection connection)    throws psl.discus.javasrc.uddi.error.JUDDIException, java.sql.SQLException  {    if (businessKey == null)      throw new JUDDIException("attempt to select a BusinessEntity using a null BusinessKey");    BusinessEntity business = null;    PreparedStatement statement = null;    ResultSet resultSet = null;    try    {      statement = connection.prepareStatement(selectSQL);      statement.setString(1,businessKey.toString());      log.info("select from BUSINESS_ENTITY table:\n\n\t" + selectSQL +        "\n\t BUSINESS_KEY=" + businessKey.toString() + "\n");      resultSet = statement.executeQuery();      if (resultSet.next())      {        business = new BusinessEntity();        business.setBusinessKey(businessKey);        business.setAuthorizedName(resultSet.getString("AUTHORIZED_NAME"));        business.setOperator(resultSet.getString("OPERATOR"));      }      if (business != null)        log.info("select successful, at least one row was found");      else        log.info("select executed successfully but no rows were found with BUSINESS_KEY=" + businessKey.toString());      return business;    }    finally    {      try {        resultSet.close();        statement.close();      }      catch (Exception e)      {        log.warn("An Exception was encountered while attempting to close " +          "the Select BusinessEntity ResultSet and PreparedStatement: "+e.getMessage(),e);      }    }  }  /**   * Select all rows from the business_entities table for a given   * 'AuthorizedName' value.   *   * @param  authorizedName The Authorized Name of a BusinessEntity owner.   * @param  JDBC A JDBC connection   * @throws psl.discus.javasrc.uddi.error.JUDDIException, java.sql.SQLException   */  public static Vector selectByAuthorizedName(String authorizedName,Connection connection)    throws psl.discus.javasrc.uddi.error.JUDDIException, java.sql.SQLException  {    if (authorizedName == null)      throw new JUDDIException("attempt to select a Collection of BusinessEntity instances using a null AuthorizedName");    Vector businessList = new Vector();    PreparedStatement statement = null;    ResultSet resultSet = null;    try    {      // create a statement to query with      statement = connection.prepareStatement(selectByAuthorizedNameSQL);      statement.setString(1,authorizedName.toString());      log.info("select from BUSINESS_ENTITY table:\n\n\t" + selectByAuthorizedNameSQL +        "\n\t AUTHORIZED_NAME=" + authorizedName.toString() + "\n");      // execute the statement      resultSet = statement.executeQuery();      BusinessEntity business = null;      while (resultSet.next())      {        business = new BusinessEntity();        business.setBusinessKey(resultSet.getString("BUSINESS_KEY"));        business.setAuthorizedName(authorizedName);        business.setOperator(resultSet.getString("OPERATOR"));        businessList.add(business);        business = null;      }      log.info("select from the BUSINESS_ENTITY was successful, rows selected=" + businessList.size());      return businessList;    }    finally    {      try {        resultSet.close();        statement.close();      }      catch (Exception e)      {        log.warn("An Exception was encountered while attempting to close " +          "the Select BusinessEntity ResultSet and PreparedStatement: "+e.getMessage(),e);      }    }  }  /**   * Verify that 'authorizedName' has the authority to update or delete    * BusinessEntity identified by the businessKey parameter   *   * @param  businessKey   * @param  authorizedName   * @param  connection   * @throws psl.discus.javasrc.uddi.error.JUDDIException, java.sql.SQLException   */  public static boolean verifyOwnership(String businessKey,String authorizedName,Connection connection)    throws psl.discus.javasrc.uddi.error.JUDDIException, java.sql.SQLException  {    if ((businessKey == null) || (authorizedName == null))      return false;    boolean authorized = false;    PreparedStatement statement = null;    ResultSet resultSet = null;    try    {      statement = connection.prepareStatement(verifyOwnershipSQL);      statement.setString(1,businessKey);      statement.setString(2,authorizedName);      log.info("checking ownership of BUSINESS_ENTITY:\n\n\t" + verifyOwnershipSQL +        "\n\t BUSINESS_KEY=" + businessKey +        "\n\t AUTHORIZED_NAME=" + authorizedName + "\n");      resultSet = statement.executeQuery();      if (resultSet.next())        authorized = true;            if (authorized)        log.info("authorization was successful, a matching row was found");      else        log.info("select executed successfully but authorization was unsuccessful");      return authorized;    }    finally    {      try {        resultSet.close();        statement.close();      }      catch (Exception e) { } // nothing we can do about this!    }  }  /***************************************************************************/  /***************************** TEST DRIVER *********************************/  /***************************************************************************/  // unit test-driver  public static void main(String[] args)  {    psl.discus.javasrc.uddi.util.SysManager.startup();    ConnectionPool pool = ConnectionPool.getInstance();    PooledConnection pooledConnection = pool.acquirePooledConnection();    Connection connection = pooledConnection.getConnection();    if (pooledConnection == null)      throw new RuntimeException("PooledConnection is null - cannot continue with test");    if (connection == null)      throw new RuntimeException("Connection is null - cannot continue with test");    test(connection);    pool.releasePooledConnection(pooledConnection);    pool.destroy();    psl.discus.javasrc.uddi.util.SysManager.shutdown();  }  // system test-driver  public static void test(Connection connection)  {    Transaction txn = new Transaction();        if (connection != null)    {      try      {        String businessKey = UUID.nextID();        BusinessEntity business = new BusinessEntity();        business.setBusinessKey(businessKey);        business.setAuthorizedName("sviens");        business.setOperator("www.jUDDI.org");        // begin a new transaction        txn.begin(connection);        // insert a new BusinessEntity        BusinessEntityTable.insert(business,connection);        // select one of the BusinessEntity objects        business = BusinessEntityTable.select(businessKey,connection);        // select a Collection of BusinessEntity objects by AuthorizedName        Vector businessList = BusinessEntityTable.selectByAuthorizedName("mviens",connection);        // delete that BusinessEntity object        //BusinessEntityTable.delete(businessKey,connection);        // re-select that BusinessEntity object        business = BusinessEntityTable.select(businessKey,connection);        // commit the transaction        txn.commit();      }      catch(Exception ex)      {        ex.printStackTrace();        try {          txn.rollback();        }        catch(java.sql.SQLException sqlex) {          sqlex.printStackTrace();        }      }    }  }}