/*
 * UddiP2PTesterGUI.java
 *
 * Created on August 26, 2002, 2:56 PM
 */

package psl.discus.javasrc.uddi;

import psl.discus.javasrc.security.ServiceSpace;
import psl.discus.javasrc.p2p.*;
import psl.discus.javasrc.shared.TextPaneAppender;

import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;
import java.io.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import org.w3c.dom.*;
import org.w3c.dom.Element;
import org.apache.axis.utils.XMLUtils;
import org.apache.log4j.*;

/**
 * A GUI for the UddiP2PTester class
 * @author  Matias
 */
public class UddiP2PTesterGUI extends javax.swing.JFrame implements ClientEventListener {

    private UddiP2PTester tester;
    private Logger logger;


    public UddiP2PTesterGUI() {
        initComponents();

        //System.setOut(new TextAreaPrintStream());
        TextPaneAppender appender = new TextPaneAppender(textPane);
        appender.setLayout(new PatternLayout("%C{1}: %m%n"));
        Logger mainLogger = Logger.getLogger("psl.discus");
        mainLogger.removeAllAppenders();
        mainLogger.addAppender(appender);


        logger = Logger.getLogger(UddiP2PTesterGUI.class);

        this.tester = new UddiP2PTester();
    }

    /**
     * Set the service space list to the given array of service spaces
     */
    public void setServiceSpaces(Object[] serviceSpaces) {

        DefaultListModel model = new DefaultListModel();
        for (int i = 0; i < serviceSpaces.length; i++) {
            model.addElement(serviceSpaces[i]);

        }

        serviceSpaceList.setModel(model);

    }

    public void clientResponseEvent(ClientResponseEvent evt) {

        logger.info("received a response from client for " +
                    evt.getSourceQuery() + " query");

        StringWriter writer = new StringWriter();

        Element response = evt.getResponse();
        NodeList nodes = response.getChildNodes();
        for (int i = 0; i < nodes.getLength(); i++) {
            Node currentNode = nodes.item(i);

            if (currentNode.getNodeName().equals(Tags.SOAP_ENVELOPE_TAG)) {
                XMLUtils.ElementToWriter((Element) currentNode, writer);
                logger.info(writer.toString());
            }
        }
    }

    public void clientNotificationEvent(ClientNotificationEvent evt) {
        logger.info("received a client notification: " +
                "found new service space: " + evt.getServiceSpaceEndpoint());

        ((DefaultListModel) serviceSpaceList.getModel()).addElement(evt.getServiceSpaceEndpoint());


    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        queryType = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        serviceSpaceList = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        findServiceRadio = new javax.swing.JRadioButton();
        findServiceText = new javax.swing.JTextField();
        getDetailsRadio = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        sendQueryButton = new javax.swing.JButton();

        textPane = new JTextPane();
        textPane.setEditable(false);
        // initialize text pane with styles
        Style def = StyleContext.getDefaultStyleContext().
                                        getStyle(StyleContext.DEFAULT_STYLE);

        Style regular = textPane.addStyle("debug", def);
        StyleConstants.setFontFamily(def, "Courier New");
        StyleConstants.setFontSize(def, 12);

        {
            Style s = textPane.addStyle("info", regular);
            StyleConstants.setBold(s, true);
            StyleConstants.setForeground(s, Color.blue.darker());
        }

        {
            Style s = textPane.addStyle("warn", regular);
            StyleConstants.setItalic(s, true);
            StyleConstants.setForeground(s, Color.red);
        }


        setTitle("UddiP2PTester");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(300,200));
        jScrollPane1.setViewportView(textPane);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel2.setPreferredSize(new java.awt.Dimension(200, 100));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 100, 5));

        jLabel2.setText("Service Space Endpoints:");
        jPanel4.add(jLabel2);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(200, 60));
        serviceSpaceList.setPreferredSize(new java.awt.Dimension(10, 10));
        jScrollPane2.setViewportView(serviceSpaceList);

        jPanel4.add(jScrollPane2);

        jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridLayout(3, 1));

        findServiceRadio.setText("FindService");
        queryType.add(findServiceRadio);
        jPanel5.add(findServiceRadio);

        jPanel5.add(findServiceText);

        getDetailsRadio.setText("GetDetails");
        queryType.add(getDetailsRadio);
        jPanel5.add(getDetailsRadio);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        sendQueryButton.setText("Send query");
        sendQueryButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                sendQuery(e);
            }
        });

        jPanel6.add(sendQueryButton);

        jPanel3.add(jPanel6, java.awt.BorderLayout.SOUTH);

        jPanel2.add(jPanel3, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void sendQuery(java.awt.event.ActionEvent evt) {

        SendQueryThread thread =
                new SendQueryThread(getDetailsRadio.isSelected() ? SendQueryThread.GETDETAILS_QUERY :
                SendQueryThread.FIND_QUERY);

        thread.start();

    }

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    public static void main(String args[]) {
        UddiP2PTesterGUI gui = new UddiP2PTesterGUI();
        gui.setSize(500,400);
        gui.show();

        ServiceSpaceEndpoint[] serviceSpaces = gui.tester.init(gui);
        gui.setServiceSpaces(serviceSpaces);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup queryType;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList serviceSpaceList;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton findServiceRadio;
    private javax.swing.JTextField findServiceText;
    private javax.swing.JRadioButton getDetailsRadio;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton sendQueryButton;
    private JTextPane textPane;
    // End of variables declaration//GEN-END:variables



    /**
     * Used to send queries asynchronously
     */
    private final class SendQueryThread extends Thread {

        private static final int FIND_QUERY = 1, GETDETAILS_QUERY = 2;
        private int queryType;

        public SendQueryThread(int queryType) {
            this.queryType = queryType;
        }

        public void run() {
            if (queryType == FIND_QUERY) {
                tester.sendFindServiceQuery(findServiceText.getText(), UddiP2PTesterGUI.this);
            } else if (queryType == GETDETAILS_QUERY) {
                ServiceSpaceEndpoint endpoint = (ServiceSpaceEndpoint) serviceSpaceList.getSelectedValue();
                if (endpoint == null) {
                    logger.warn("no endpoint selected");
                    return;
                }
                tester.sendGetServiceDetailsQuery(endpoint, UddiP2PTesterGUI.this);
            }

        }

    }

}
