/* * jUDDI - An open source Java implementation of UDDI v2.0 * http://juddi.org/ * * Copyright (c) 2002, Steve Viens and contributors * All rights reserved. */package psl.discus.javasrc.uddi.util;import javax.servlet.*;import javax.servlet.http.*;import java.io.*;import java.util.*;/** * Listener servlet is used to interrogate values coming from a UDDI Client * implementation.  Used mainly to ensure that jUDDI will handle every client * appropriatly. * * @author  Steve Viens * @version 0.6 */public class SnoopServlet extends HttpServlet{  public void init()    throws ServletException  {    super.init();  }    public void doGet(HttpServletRequest req, HttpServletResponse res)    throws ServletException, IOException  {    doPost(req,res);  }  public void doPost(HttpServletRequest req, HttpServletResponse res)    throws ServletException, IOException  {    res.setContentType("text/html");    PrintWriter out = res.getWriter();    out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">");    out.println("<html>");    out.println("<head>");    out.println("<title>jUDDI</title>");    out.println("</head>");    out.println("<body>");    out.println("<h2>jUDDI Request Properties</h2>");    out.println("<p>");    out.println("<pre>");        out.println("Request Information");    out.println("-------------------");    out.println("Request method: " + req.getMethod());    out.println("Request URI: " + req.getRequestURI());    out.println("Request protocol: " + req.getProtocol().trim());    out.println("Servlet path: " + req.getServletPath());    out.println("Path info: " + req.getPathInfo());    out.println("Path translated: " + req.getPathTranslated());    out.println("Query string: " + req.getQueryString());    out.println("Content length: " + req.getContentLength());    out.println("Content type: " + req.getContentType());    out.println("Server name: " + req.getServerName());    out.println("Server port: " + req.getServerPort());    out.println("Remote user: " + req.getRemoteUser());    out.println("Remote address: " + req.getRemoteAddr());    out.println("Remote host: " + req.getRemoteHost());    out.println("Authorization type: " + req.getAuthType());    Enumeration enum = req.getHeaderNames();    if ((enum != null) && (enum.hasMoreElements()))    {      out.println();      out.println("Request Headers");      out.println("---------------");      while (enum.hasMoreElements())      {        String name = (String)enum.nextElement();        out.println(name + ": " + req.getHeader(name));      }    }    // only try to write this if request method was post!    if (req.getMethod().equalsIgnoreCase("post"))    {      out.println();      out.println("Request Payload (http \"post\" method only)");      out.println("----------------------------------------");      Reader requestReader = req.getReader();      int contentLength = req.getContentLength();      char[] payload = new char[contentLength];      int offset = 0;      while (offset < contentLength)        offset += requestReader.read(payload,offset,contentLength - offset);      out.println(payload);    }        out.println("</pre>");    out.println("</p>");    out.println("</body>");    out.println("</html>");      // The information above should be written to a JavaBean    // and stored in the 'request' space so the following    // JavaServer Page can display it in the standard jUDDI    // UI format. Then the following line should be uncommented!    //req.setAttribute("content",new String("-- jUDDI to-do #2 --"));    //req.getRequestDispatcher("info.jsp").forward(req,res);    }  public void destroy()  {    super.destroy();  }}